

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Aug 07 19:55:08 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14   000000                     
    15                           ; Generated 17/10/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4580 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49   000000                     _RC2	set	31762
    50   000000                     _RC1	set	31761
    51   000000                     _TRISC	set	3988
    52   000000                     _RC0	set	31760
    53   000000                     _TRISD	set	3989
    54   000000                     _PORTD	set	3971
    55                           
    56                           	psect	smallconst
    57   000600                     __psmallconst:
    58                           	callstack 0
    59   000600  00                 	db	0
    60   000601                     STR_1:
    61   000601  44                 	db	68	;'D'
    62   000602  45                 	db	69	;'E'
    63   000603  56                 	db	86	;'V'
    64   000604  49                 	db	73	;'I'
    65   000605  4B                 	db	75	;'K'
    66   000606  41                 	db	65	;'A'
    67   000607  00                 	db	0
    68   000608  00                 	db	0	; dummy byte at the end
    69   000000                     
    70                           ; #config settings
    71                           
    72                           	psect	cinit
    73   000792                     __pcinit:
    74                           	callstack 0
    75   000792                     start_initialization:
    76                           	callstack 0
    77   000792                     __initialization:
    78                           	callstack 0
    79   000792                     end_of_initialization:
    80                           	callstack 0
    81   000792                     __end_of__initialization:
    82                           	callstack 0
    83   000792  0E00               	movlw	low (__Lsmallconst shr (0+16))
    84   000794  6EF8               	movwf	tblptru,c
    85   000796  0E06               	movlw	high __Lsmallconst
    86   000798  6EF7               	movwf	tblptrh,c
    87   00079A  0100               	movlb	0
    88   00079C  EF05  F003         	goto	_main	;jump to C main() function
    89                           
    90                           	psect	cstackCOMRAM
    91   000001                     __pcstackCOMRAM:
    92                           	callstack 0
    93   000001                     cmd@a:
    94                           	callstack 0
    95   000001                     data@a:
    96                           	callstack 0
    97                           
    98                           ; 1 bytes @ 0x0
    99   000001                     	ds	1
   100   000002                     cmd@i:
   101                           	callstack 0
   102   000002                     data@i:
   103                           	callstack 0
   104                           
   105                           ; 2 bytes @ 0x1
   106   000002                     	ds	2
   107   000004                     cmd@i_51:
   108                           	callstack 0
   109   000004                     data@i_55:
   110                           	callstack 0
   111                           
   112                           ; 2 bytes @ 0x3
   113   000004                     	ds	2
   114   000006                     display@p:
   115                           	callstack 0
   116                           
   117                           ; 1 bytes @ 0x5
   118   000006                     	ds	1
   119   000007                     main@i_47:
   120                           	callstack 0
   121                           
   122                           ; 4 bytes @ 0x6
   123   000007                     	ds	4
   124   00000B                     main@i:
   125                           	callstack 0
   126                           
   127                           ; 2 bytes @ 0xA
   128   00000B                     	ds	2
   129                           
   130 ;;
   131 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   132 ;;
   133 ;; *************** function _main *****************
   134 ;; Defined at:
   135 ;;		line 14 in file "SCROLL.c"
   136 ;; Parameters:    Size  Location     Type
   137 ;;		None
   138 ;; Auto vars:     Size  Location     Type
   139 ;;  i               4    6[COMRAM] long 
   140 ;;  i               2   10[COMRAM] int 
   141 ;; Return value:  Size  Location     Type
   142 ;;                  1    wreg      void 
   143 ;; Registers used:
   144 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   145 ;; Tracked objects:
   146 ;;		On entry : 0/0
   147 ;;		On exit  : 0/0
   148 ;;		Unchanged: 0/0
   149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   150 ;;      Params:         0       0       0       0       0       0       0
   151 ;;      Locals:         6       0       0       0       0       0       0
   152 ;;      Temps:          0       0       0       0       0       0       0
   153 ;;      Totals:         6       0       0       0       0       0       0
   154 ;;Total ram usage:        6 bytes
   155 ;; Hardware stack levels required when called: 2
   156 ;; This function calls:
   157 ;;		_cmd
   158 ;;		_display
   159 ;; This function is called by:
   160 ;;		Startup code after reset
   161 ;; This function uses a non-reentrant model
   162 ;;
   163                           
   164                           	psect	text0
   165   00060A                     __ptext0:
   166                           	callstack 0
   167   00060A                     _main:
   168                           	callstack 29
   169   00060A                     
   170                           ;SCROLL.c: 16: TRISC=0X00;
   171   00060A  0E00               	movlw	0
   172   00060C  6E94               	movwf	148,c	;volatile
   173                           
   174                           ;SCROLL.c: 17: TRISD=0X00;
   175   00060E  0E00               	movlw	0
   176   000610  6E95               	movwf	149,c	;volatile
   177   000612                     
   178                           ;SCROLL.c: 18: cmd(0x0f);
   179   000612  0E0F               	movlw	15
   180   000614  EC83  F003         	call	_cmd
   181   000618                     
   182                           ;SCROLL.c: 19: cmd(0x0c);
   183   000618  0E0C               	movlw	12
   184   00061A  EC83  F003         	call	_cmd
   185   00061E                     
   186                           ;SCROLL.c: 20: cmd(0x8f);
   187   00061E  0E8F               	movlw	143
   188   000620  EC83  F003         	call	_cmd
   189   000624                     
   190                           ;SCROLL.c: 21: display("DEVIKA");
   191   000624  0E01               	movlw	low STR_1
   192   000626  6E06               	movwf	display@p^0,c
   193   000628  ECB3  F003         	call	_display	;wreg free
   194   00062C                     l834:
   195                           
   196                           ;SCROLL.c: 23: {;SCROLL.c: 24:                 for(int i=0;i<21;i++)
   197   00062C  0E00               	movlw	0
   198   00062E  6E0C               	movwf	(main@i+1)^0,c
   199   000630  0E00               	movlw	0
   200   000632  6E0B               	movwf	main@i^0,c
   201   000634                     l840:
   202                           
   203                           ;SCROLL.c: 25:                 {;SCROLL.c: 26:                 cmd(0x18);
   204   000634  0E18               	movlw	24
   205   000636  EC83  F003         	call	_cmd
   206   00063A                     
   207                           ;SCROLL.c: 28:                  for(long i=0;i<=50000;i++);
   208   00063A  0E00               	movlw	0
   209   00063C  6E07               	movwf	main@i_47^0,c
   210   00063E  0E00               	movlw	0
   211   000640  6E08               	movwf	(main@i_47+1)^0,c
   212   000642  0E00               	movlw	0
   213   000644  6E09               	movwf	(main@i_47+2)^0,c
   214   000646  0E00               	movlw	0
   215   000648  6E0A               	movwf	(main@i_47+3)^0,c
   216   00064A                     l848:
   217   00064A  0E01               	movlw	1
   218   00064C  2607               	addwf	main@i_47^0,f,c
   219   00064E  0E00               	movlw	0
   220   000650  2208               	addwfc	(main@i_47+1)^0,f,c
   221   000652  2209               	addwfc	(main@i_47+2)^0,f,c
   222   000654  220A               	addwfc	(main@i_47+3)^0,f,c
   223   000656  BE0A               	btfsc	(main@i_47+3)^0,7,c
   224   000658  EF3A  F003         	goto	u91
   225   00065C  500A               	movf	(main@i_47+3)^0,w,c
   226   00065E  1009               	iorwf	(main@i_47+2)^0,w,c
   227   000660  E10B               	bnz	u90
   228   000662  0E51               	movlw	81
   229   000664  5C07               	subwf	main@i_47^0,w,c
   230   000666  0EC3               	movlw	195
   231   000668  5808               	subwfb	(main@i_47+1)^0,w,c
   232   00066A  A0D8               	btfss	status,0,c
   233   00066C  EF3A  F003         	goto	u91
   234   000670  EF3C  F003         	goto	u90
   235   000674                     u91:
   236   000674  EF25  F003         	goto	l848
   237   000678                     u90:
   238   000678                     
   239                           ;SCROLL.c: 29:                 }
   240   000678  4A0B               	infsnz	main@i^0,f,c
   241   00067A  2A0C               	incf	(main@i+1)^0,f,c
   242   00067C  BE0C               	btfsc	(main@i+1)^0,7,c
   243   00067E  EF4A  F003         	goto	u101
   244   000682  500C               	movf	(main@i+1)^0,w,c
   245   000684  E109               	bnz	u100
   246   000686  0E15               	movlw	21
   247   000688  5C0B               	subwf	main@i^0,w,c
   248   00068A  A0D8               	btfss	status,0,c
   249   00068C  EF4A  F003         	goto	u101
   250   000690  EF4C  F003         	goto	u100
   251   000694                     u101:
   252   000694  EF1A  F003         	goto	l840
   253   000698                     u100:
   254   000698                     
   255                           ;SCROLL.c: 30:                 cmd(0x02);
   256   000698  0E02               	movlw	2
   257   00069A  EC83  F003         	call	_cmd
   258   00069E  EF16  F003         	goto	l834
   259   0006A2  EF00  F000         	goto	start
   260   0006A6                     __end_of_main:
   261                           	callstack 0
   262                           
   263 ;; *************** function _display *****************
   264 ;; Defined at:
   265 ;;		line 58 in file "SCROLL.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;  p               1    5[COMRAM] PTR const unsigned char 
   268 ;;		 -> STR_1(7), 
   269 ;; Auto vars:     Size  Location     Type
   270 ;;		None
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   280 ;;      Params:         1       0       0       0       0       0       0
   281 ;;      Locals:         0       0       0       0       0       0       0
   282 ;;      Temps:          0       0       0       0       0       0       0
   283 ;;      Totals:         1       0       0       0       0       0       0
   284 ;;Total ram usage:        1 bytes
   285 ;; Hardware stack levels used: 1
   286 ;; Hardware stack levels required when called: 1
   287 ;; This function calls:
   288 ;;		_data
   289 ;; This function is called by:
   290 ;;		_main
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294                           	psect	text1
   295   000766                     __ptext1:
   296                           	callstack 0
   297   000766                     _display:
   298                           	callstack 29
   299   000766                     
   300                           ;SCROLL.c: 58: void display(const char *p);SCROLL.c: 59: {;SCROLL.c: 60:     while(*p)
   301   000766  EFBC  F003         	goto	l822
   302   00076A                     l818:
   303                           
   304                           ;SCROLL.c: 61:     {;SCROLL.c: 62:         data(*p);
   305   00076A  C006  FFF6         	movff	display@p,tblptrl
   306   00076E                     	if	0	;There is only one active tblptr byte
   307   00076E                     	endif
   308   00076E                     	if	0	;tblptru may be non-zero
   309   00076E                     	endif
   310   00076E                     	if	0	;tblptru may be non-zero
   311   00076E                     	endif
   312   00076E  0008               	tblrd		*
   313   000770  50F5               	movf	tablat,w,c
   314   000772  EC53  F003         	call	_data
   315   000776                     
   316                           ;SCROLL.c: 63:         p++;
   317   000776  2A06               	incf	display@p^0,f,c
   318   000778                     l822:
   319                           
   320                           ;SCROLL.c: 60:     while(*p)
   321   000778  C006  FFF6         	movff	display@p,tblptrl
   322   00077C                     	if	0	;There is only one active tblptr byte
   323   00077C                     	endif
   324   00077C                     	if	0	;tblptru may be non-zero
   325   00077C                     	endif
   326   00077C                     	if	0	;tblptru may be non-zero
   327   00077C                     	endif
   328   00077C  0008               	tblrd		*
   329   00077E  50F5               	movf	tablat,w,c
   330   000780  0900               	iorlw	0
   331   000782  A4D8               	btfss	status,2,c
   332   000784  EFC6  F003         	goto	u81
   333   000788  EFC8  F003         	goto	u80
   334   00078C                     u81:
   335   00078C  EFB5  F003         	goto	l818
   336   000790                     u80:
   337   000790  0012               	return		;funcret
   338   000792                     __end_of_display:
   339                           	callstack 0
   340                           
   341 ;; *************** function _data *****************
   342 ;; Defined at:
   343 ;;		line 46 in file "SCROLL.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;  a               1    wreg     unsigned char 
   346 ;; Auto vars:     Size  Location     Type
   347 ;;  a               1    0[COMRAM] unsigned char 
   348 ;;  i               2    3[COMRAM] int 
   349 ;;  i               2    1[COMRAM] int 
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, status,2, status,0
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   359 ;;      Params:         0       0       0       0       0       0       0
   360 ;;      Locals:         5       0       0       0       0       0       0
   361 ;;      Temps:          0       0       0       0       0       0       0
   362 ;;      Totals:         5       0       0       0       0       0       0
   363 ;;Total ram usage:        5 bytes
   364 ;; Hardware stack levels used: 1
   365 ;; This function calls:
   366 ;;		Nothing
   367 ;; This function is called by:
   368 ;;		_display
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text2
   373   0006A6                     __ptext2:
   374                           	callstack 0
   375   0006A6                     _data:
   376                           	callstack 29
   377                           
   378                           ;incstack = 0
   379                           ;data@a stored from wreg
   380   0006A6  6E01               	movwf	data@a^0,c
   381   0006A8                     
   382                           ;SCROLL.c: 46: void data(unsigned char a );SCROLL.c: 47: {;SCROLL.c: 49:     RC0=1;
   383   0006A8  8082               	bsf	3970,0,c	;volatile
   384                           
   385                           ;SCROLL.c: 50:     RC1=0;
   386   0006AA  9282               	bcf	3970,1,c	;volatile
   387   0006AC                     
   388                           ;SCROLL.c: 51:     PORTD=a;
   389   0006AC  C001  FF83         	movff	data@a,3971	;volatile
   390   0006B0                     
   391                           ;SCROLL.c: 52:     RC2=1;
   392   0006B0  8482               	bsf	3970,2,c	;volatile
   393   0006B2                     
   394                           ;SCROLL.c: 53:     for(int i=0;i<=100;i++);
   395   0006B2  0E00               	movlw	0
   396   0006B4  6E03               	movwf	(data@i+1)^0,c
   397   0006B6  0E00               	movlw	0
   398   0006B8  6E02               	movwf	data@i^0,c
   399   0006BA                     l736:
   400   0006BA  4A02               	infsnz	data@i^0,f,c
   401   0006BC  2A03               	incf	(data@i+1)^0,f,c
   402   0006BE  BE03               	btfsc	(data@i+1)^0,7,c
   403   0006C0  EF6B  F003         	goto	u11
   404   0006C4  5003               	movf	(data@i+1)^0,w,c
   405   0006C6  E109               	bnz	u10
   406   0006C8  0E65               	movlw	101
   407   0006CA  5C02               	subwf	data@i^0,w,c
   408   0006CC  A0D8               	btfss	status,0,c
   409   0006CE  EF6B  F003         	goto	u11
   410   0006D2  EF6D  F003         	goto	u10
   411   0006D6                     u11:
   412   0006D6  EF5D  F003         	goto	l736
   413   0006DA                     u10:
   414   0006DA                     
   415                           ;SCROLL.c: 54:     RC2=0;
   416   0006DA  9482               	bcf	3970,2,c	;volatile
   417   0006DC                     
   418                           ;SCROLL.c: 55:     for(int i=0;i<=5000;i++);
   419   0006DC  0E00               	movlw	0
   420   0006DE  6E05               	movwf	(data@i_55+1)^0,c
   421   0006E0  0E00               	movlw	0
   422   0006E2  6E04               	movwf	data@i_55^0,c
   423   0006E4                     l746:
   424   0006E4  4A04               	infsnz	data@i_55^0,f,c
   425   0006E6  2A05               	incf	(data@i_55+1)^0,f,c
   426   0006E8  BE05               	btfsc	(data@i_55+1)^0,7,c
   427   0006EA  EF80  F003         	goto	u21
   428   0006EE  0E89               	movlw	137
   429   0006F0  5C04               	subwf	data@i_55^0,w,c
   430   0006F2  0E13               	movlw	19
   431   0006F4  5805               	subwfb	(data@i_55+1)^0,w,c
   432   0006F6  A0D8               	btfss	status,0,c
   433   0006F8  EF80  F003         	goto	u21
   434   0006FC  EF82  F003         	goto	u20
   435   000700                     u21:
   436   000700  EF72  F003         	goto	l746
   437   000704                     u20:
   438   000704  0012               	return		;funcret
   439   000706                     __end_of_data:
   440                           	callstack 0
   441                           
   442 ;; *************** function _cmd *****************
   443 ;; Defined at:
   444 ;;		line 36 in file "SCROLL.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  a               1    wreg     unsigned char 
   447 ;; Auto vars:     Size  Location     Type
   448 ;;  a               1    0[COMRAM] unsigned char 
   449 ;;  i               2    3[COMRAM] int 
   450 ;;  i               2    1[COMRAM] int 
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg, status,2, status,0
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   460 ;;      Params:         0       0       0       0       0       0       0
   461 ;;      Locals:         5       0       0       0       0       0       0
   462 ;;      Temps:          0       0       0       0       0       0       0
   463 ;;      Totals:         5       0       0       0       0       0       0
   464 ;;Total ram usage:        5 bytes
   465 ;; Hardware stack levels used: 1
   466 ;; This function calls:
   467 ;;		Nothing
   468 ;; This function is called by:
   469 ;;		_main
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text3
   474   000706                     __ptext3:
   475                           	callstack 0
   476   000706                     _cmd:
   477                           	callstack 30
   478                           
   479                           ;incstack = 0
   480                           ;cmd@a stored from wreg
   481   000706  6E01               	movwf	cmd@a^0,c
   482   000708                     
   483                           ;SCROLL.c: 36: void cmd(unsigned char a );SCROLL.c: 37: {;SCROLL.c: 38:     RC0=0;
   484   000708  9082               	bcf	3970,0,c	;volatile
   485                           
   486                           ;SCROLL.c: 39:     RC1=0;
   487   00070A  9282               	bcf	3970,1,c	;volatile
   488   00070C                     
   489                           ;SCROLL.c: 40:     PORTD=a;
   490   00070C  C001  FF83         	movff	cmd@a,3971	;volatile
   491   000710                     
   492                           ;SCROLL.c: 41:     RC2=1;
   493   000710  8482               	bsf	3970,2,c	;volatile
   494   000712                     
   495                           ;SCROLL.c: 42:     for(int i=0;i<=100;i++);
   496   000712  0E00               	movlw	0
   497   000714  6E03               	movwf	(cmd@i+1)^0,c
   498   000716  0E00               	movlw	0
   499   000718  6E02               	movwf	cmd@i^0,c
   500   00071A                     l762:
   501   00071A  4A02               	infsnz	cmd@i^0,f,c
   502   00071C  2A03               	incf	(cmd@i+1)^0,f,c
   503   00071E  BE03               	btfsc	(cmd@i+1)^0,7,c
   504   000720  EF9B  F003         	goto	u31
   505   000724  5003               	movf	(cmd@i+1)^0,w,c
   506   000726  E109               	bnz	u30
   507   000728  0E65               	movlw	101
   508   00072A  5C02               	subwf	cmd@i^0,w,c
   509   00072C  A0D8               	btfss	status,0,c
   510   00072E  EF9B  F003         	goto	u31
   511   000732  EF9D  F003         	goto	u30
   512   000736                     u31:
   513   000736  EF8D  F003         	goto	l762
   514   00073A                     u30:
   515   00073A                     
   516                           ;SCROLL.c: 43:     RC2=0;
   517   00073A  9482               	bcf	3970,2,c	;volatile
   518   00073C                     
   519                           ;SCROLL.c: 44:     for(int i=0;i<=5000;i++);
   520   00073C  0E00               	movlw	0
   521   00073E  6E05               	movwf	(cmd@i_51+1)^0,c
   522   000740  0E00               	movlw	0
   523   000742  6E04               	movwf	cmd@i_51^0,c
   524   000744                     l772:
   525   000744  4A04               	infsnz	cmd@i_51^0,f,c
   526   000746  2A05               	incf	(cmd@i_51+1)^0,f,c
   527   000748  BE05               	btfsc	(cmd@i_51+1)^0,7,c
   528   00074A  EFB0  F003         	goto	u41
   529   00074E  0E89               	movlw	137
   530   000750  5C04               	subwf	cmd@i_51^0,w,c
   531   000752  0E13               	movlw	19
   532   000754  5805               	subwfb	(cmd@i_51+1)^0,w,c
   533   000756  A0D8               	btfss	status,0,c
   534   000758  EFB0  F003         	goto	u41
   535   00075C  EFB2  F003         	goto	u40
   536   000760                     u41:
   537   000760  EFA2  F003         	goto	l772
   538   000764                     u40:
   539   000764  0012               	return		;funcret
   540   000766                     __end_of_cmd:
   541                           	callstack 0
   542                           
   543                           	psect	rparam
   544   000000                     tosu	equ	0xFFF
   545                           tosh	equ	0xFFE
   546                           tosl	equ	0xFFD
   547                           stkptr	equ	0xFFC
   548                           pclatu	equ	0xFFB
   549                           pclath	equ	0xFFA
   550                           pcl	equ	0xFF9
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           prodh	equ	0xFF4
   556                           prodl	equ	0xFF3
   557                           indf0	equ	0xFEF
   558                           postinc0	equ	0xFEE
   559                           postdec0	equ	0xFED
   560                           preinc0	equ	0xFEC
   561                           plusw0	equ	0xFEB
   562                           fsr0h	equ	0xFEA
   563                           fsr0l	equ	0xFE9
   564                           wreg	equ	0xFE8
   565                           indf1	equ	0xFE7
   566                           postinc1	equ	0xFE6
   567                           postdec1	equ	0xFE5
   568                           preinc1	equ	0xFE4
   569                           plusw1	equ	0xFE3
   570                           fsr1h	equ	0xFE2
   571                           fsr1l	equ	0xFE1
   572                           bsr	equ	0xFE0
   573                           indf2	equ	0xFDF
   574                           postinc2	equ	0xFDE
   575                           postdec2	equ	0xFDD
   576                           preinc2	equ	0xFDC
   577                           plusw2	equ	0xFDB
   578                           fsr2h	equ	0xFDA
   579                           fsr2l	equ	0xFD9
   580                           status	equ	0xFD8

Data Sizes:
    Strings     7
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    display@p	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_display
    _display->_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     363
                                              6 COMRAM     6     6      0
                                _cmd
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              1     0      1     196
                                              5 COMRAM     1     0      1
                               _data
 ---------------------------------------------------------------------------------
 (2) _data                                                 5     5      0      75
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _cmd                                                  5     5      0      75
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cmd
   _display
     _data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      C       C       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRh          6A      0       0      16        0.0%
BITBIGSFRlh         10      0       0      17        0.0%
BITBIGSFRll        282      0       0      18        0.0%
ABS                  0      0       0      19        0.0%
BIGRAM             5FF      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Aug 07 19:55:08 2024

                     l32 073A                       l42 0704                       l35 0764  
                     l39 06DA                       l48 0790                       u10 06DA  
                     u11 06D6                       u20 0704                       u21 0700  
                     u30 073A                       u31 0736                       u40 0764  
                     u41 0760                       u80 0790                       u81 078C  
                     u90 0678                       u91 0674                      l730 06B2  
                    l740 06DC                      l724 06A8                      l820 0776  
                    l750 0708                      l726 06AC                      l822 0778  
                    l830 061E                      l752 070C                      l736 06BA  
                    l728 06B0                      l816 0766                      l840 0634  
                    l832 0624                      l824 060A                      l762 071A  
                    l754 0710                      l746 06E4                      l738 06BE  
                    l818 076A                      l850 0678                      l842 063A  
                    l834 062C                      l826 0612                      l772 0744  
                    l764 071E                      l756 0712                      l748 06E8  
                    l852 067C                      l828 0618                      l774 0748  
                    l766 073C                      l854 0698                      l848 064A  
                    _RC0 7C10                      _RC1 7C11                      _RC2 7C12  
                    u100 0698                      u101 0694                      _cmd 0706  
                   ?_cmd 0001                     STR_1 0601                     _data 06A6  
                   cmd@a 0001                     cmd@i 0002                     _main 060A  
                   start 0000             ___param_bank 0000                    ??_cmd 0001  
                  ?_data 0001                    ?_main 0001                    _PORTD 0F83  
                  _TRISC 0F94                    _TRISD 0F95          __end_of_display 0792  
                  data@a 0001                    data@i 0002                    main@i 000B  
                  tablat 0FF5                    status 0FD8          __initialization 0792  
           __end_of_data 0706             __end_of_main 06A6                   ??_data 0001  
                 ??_main 0007            __activetblptr 0001                   isa$std 0001  
              ??_display 0007             __mediumconst 0000                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8               __accesstop 0060  
__end_of__initialization 0792            ___rparam_used 0001           __pcstackCOMRAM 0001  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0600  
                __pcinit 0792                  __ramtop 0600                  cmd@i_51 0004  
                __ptext0 060A                  __ptext1 0766                  __ptext2 06A6  
                __ptext3 0706                  _display 0766     end_of_initialization 0792  
    start_initialization 0792              __end_of_cmd 0766                 ?_display 0006  
            __smallconst 0600                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600                 data@i_55 0004                 isa$xinst 0000  
               main@i_47 0007                 display@p 0006  
