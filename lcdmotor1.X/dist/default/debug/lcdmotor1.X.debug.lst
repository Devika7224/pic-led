

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Aug 05 09:31:02 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14   000000                     
    15                           ; Generated 17/10/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4580 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49   000000                     _RC2	set	31762
    50   000000                     _RC1	set	31761
    51   000000                     _RC0	set	31760
    52   000000                     _PORTB	set	3969
    53   000000                     _TRISB	set	3987
    54   000000                     _TRISC	set	3988
    55   000000                     _RC4	set	31764
    56   000000                     _TRISD	set	3989
    57   000000                     _PORTD	set	3971
    58                           
    59                           	psect	smallconst
    60   000600                     __psmallconst:
    61                           	callstack 0
    62   000600  00                 	db	0
    63   000601                     STR_2:
    64   000601  41                 	db	65	;'A'
    65   000602  4E                 	db	78	;'N'
    66   000603  54                 	db	84	;'T'
    67   000604  49                 	db	73	;'I'
    68   000605  43                 	db	67	;'C'
    69   000606  4C                 	db	76	;'L'
    70   000607  4F                 	db	79	;'O'
    71   000608  43                 	db	67	;'C'
    72   000609  4B                 	db	75	;'K'
    73   00060A  57                 	db	87	;'W'
    74   00060B  49                 	db	73	;'I'
    75   00060C  53                 	db	83	;'S'
    76   00060D  45                 	db	69	;'E'
    77   00060E  00                 	db	0
    78   00060F                     STR_3:
    79   00060F  53                 	db	83	;'S'
    80   000610  54                 	db	84	;'T'
    81   000611  4F                 	db	79	;'O'
    82   000612  50                 	db	80	;'P'
    83   000613  00                 	db	0
    84   000614  00                 	db	0	; dummy byte at the end
    85   000000                     
    86                           ; #config settings
    87                           
    88                           	psect	cinit
    89   0007C6                     __pcinit:
    90                           	callstack 0
    91   0007C6                     start_initialization:
    92                           	callstack 0
    93   0007C6                     __initialization:
    94                           	callstack 0
    95   0007C6                     end_of_initialization:
    96                           	callstack 0
    97   0007C6                     __end_of__initialization:
    98                           	callstack 0
    99   0007C6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   100   0007C8  6EF8               	movwf	tblptru,c
   101   0007CA  0E06               	movlw	high __Lsmallconst
   102   0007CC  6EF7               	movwf	tblptrh,c
   103   0007CE  0100               	movlb	0
   104   0007D0  EF0B  F003         	goto	_main	;jump to C main() function
   105                           
   106                           	psect	cstackCOMRAM
   107   000001                     __pcstackCOMRAM:
   108                           	callstack 0
   109   000001                     cmd@a:
   110                           	callstack 0
   111   000001                     data@b:
   112                           	callstack 0
   113                           
   114                           ; 1 bytes @ 0x0
   115   000001                     	ds	1
   116   000002                     cmd@i:
   117                           	callstack 0
   118   000002                     data@i:
   119                           	callstack 0
   120                           
   121                           ; 2 bytes @ 0x1
   122   000002                     	ds	2
   123   000004                     cmd@i_55:
   124                           	callstack 0
   125   000004                     data@i_59:
   126                           	callstack 0
   127                           
   128                           ; 2 bytes @ 0x3
   129   000004                     	ds	2
   130   000006                     display@p:
   131                           	callstack 0
   132                           
   133                           ; 1 bytes @ 0x5
   134   000006                     	ds	1
   135   000007                     main@count:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x6
   139   000007                     	ds	2
   140                           
   141 ;;
   142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   143 ;;
   144 ;; *************** function _main *****************
   145 ;; Defined at:
   146 ;;		line 14 in file "lcdmotor.c"
   147 ;; Parameters:    Size  Location     Type
   148 ;;		None
   149 ;; Auto vars:     Size  Location     Type
   150 ;;  count           2    6[COMRAM] int 
   151 ;; Return value:  Size  Location     Type
   152 ;;                  1    wreg      void 
   153 ;; Registers used:
   154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   155 ;; Tracked objects:
   156 ;;		On entry : 0/0
   157 ;;		On exit  : 0/0
   158 ;;		Unchanged: 0/0
   159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   160 ;;      Params:         0       0       0       0       0       0       0
   161 ;;      Locals:         2       0       0       0       0       0       0
   162 ;;      Temps:          0       0       0       0       0       0       0
   163 ;;      Totals:         2       0       0       0       0       0       0
   164 ;;Total ram usage:        2 bytes
   165 ;; Hardware stack levels required when called: 2
   166 ;; This function calls:
   167 ;;		_cmd
   168 ;;		_display
   169 ;; This function is called by:
   170 ;;		Startup code after reset
   171 ;; This function uses a non-reentrant model
   172 ;;
   173                           
   174                           	psect	text0
   175   000616                     __ptext0:
   176                           	callstack 0
   177   000616                     _main:
   178                           	callstack 29
   179   000616                     
   180                           ;lcdmotor.c: 16:      TRISC=0X10;
   181   000616  0E10               	movlw	16
   182   000618  6E94               	movwf	148,c	;volatile
   183                           
   184                           ;lcdmotor.c: 17:      TRISD=0X00;
   185   00061A  0E00               	movlw	0
   186   00061C  6E95               	movwf	149,c	;volatile
   187                           
   188                           ;lcdmotor.c: 18:      TRISB=0X00;
   189   00061E  0E00               	movlw	0
   190   000620  6E93               	movwf	147,c	;volatile
   191   000622                     
   192                           ;lcdmotor.c: 19:     cmd(0x01);
   193   000622  0E01               	movlw	1
   194   000624  EC9D  F003         	call	_cmd
   195   000628                     
   196                           ;lcdmotor.c: 20:     cmd(0x0f);
   197   000628  0E0F               	movlw	15
   198   00062A  EC9D  F003         	call	_cmd
   199   00062E                     
   200                           ;lcdmotor.c: 21:     int count=-1;
   201   00062E  6807               	setf	main@count^0,c
   202   000630  6808               	setf	(main@count+1)^0,c
   203   000632                     l846:
   204                           
   205                           ;lcdmotor.c: 23: {;lcdmotor.c: 24:      if(RC4==1)
   206   000632  A882               	btfss	3970,4,c	;volatile
   207   000634  EF1E  F003         	goto	u131
   208   000638  EF20  F003         	goto	u130
   209   00063C                     u131:
   210   00063C  EF19  F003         	goto	l846
   211   000640                     u130:
   212   000640                     
   213                           ;lcdmotor.c: 25:         {;lcdmotor.c: 26:             if(count==2)
   214   000640  0E02               	movlw	2
   215   000642  1807               	xorwf	main@count^0,w,c
   216   000644  1008               	iorwf	(main@count+1)^0,w,c
   217   000646  A4D8               	btfss	status,2,c
   218   000648  EF28  F003         	goto	u141
   219   00064C  EF2A  F003         	goto	u140
   220   000650                     u141:
   221   000650  EF2C  F003         	goto	l852
   222   000654                     u140:
   223   000654                     
   224                           ;lcdmotor.c: 27:             {;lcdmotor.c: 28:                 count=-1;
   225   000654  6807               	setf	main@count^0,c
   226   000656  6808               	setf	(main@count+1)^0,c
   227   000658                     l852:
   228                           
   229                           ;lcdmotor.c: 30:             count++;
   230   000658  4A07               	infsnz	main@count^0,f,c
   231   00065A  2A08               	incf	(main@count+1)^0,f,c
   232   00065C                     l30:
   233   00065C  B882               	btfsc	3970,4,c	;volatile
   234   00065E  EF33  F003         	goto	u151
   235   000662  EF35  F003         	goto	u150
   236   000666                     u151:
   237   000666  EF2E  F003         	goto	l30
   238   00066A                     u150:
   239   00066A                     
   240                           ;lcdmotor.c: 34:      if(count==0)
   241   00066A  5007               	movf	main@count^0,w,c
   242   00066C  1008               	iorwf	(main@count+1)^0,w,c
   243   00066E  A4D8               	btfss	status,2,c
   244   000670  EF3C  F003         	goto	u161
   245   000674  EF3E  F003         	goto	u160
   246   000678                     u161:
   247   000678  EF46  F003         	goto	l860
   248   00067C                     u160:
   249   00067C                     
   250                           ;lcdmotor.c: 35:      {;lcdmotor.c: 36:          PORTB=0X01;
   251   00067C  0E01               	movlw	1
   252   00067E  6E81               	movwf	129,c	;volatile
   253   000680                     
   254                           ;lcdmotor.c: 37:         display("CLOCKWISE");
   255   000680  0E05               	movlw	low (STR_2+4)
   256   000682  6E06               	movwf	display@p^0,c
   257   000684  ECCD  F003         	call	_display	;wreg free
   258                           
   259                           ;lcdmotor.c: 39:      }
   260   000688  EF19  F003         	goto	l846
   261   00068C                     l860:
   262   00068C  0407               	decf	main@count^0,w,c
   263   00068E  1008               	iorwf	(main@count+1)^0,w,c
   264   000690  A4D8               	btfss	status,2,c
   265   000692  EF4D  F003         	goto	u171
   266   000696  EF4F  F003         	goto	u170
   267   00069A                     u171:
   268   00069A  EF57  F003         	goto	l866
   269   00069E                     u170:
   270   00069E                     
   271                           ;lcdmotor.c: 42:             {;lcdmotor.c: 43:           PORTB=0X02;
   272   00069E  0E02               	movlw	2
   273   0006A0  6E81               	movwf	129,c	;volatile
   274   0006A2                     
   275                           ;lcdmotor.c: 44:          display("ANTICLOCKWISE");
   276   0006A2  0E01               	movlw	low STR_2
   277   0006A4  6E06               	movwf	display@p^0,c
   278   0006A6  ECCD  F003         	call	_display	;wreg free
   279                           
   280                           ;lcdmotor.c: 46: }
   281   0006AA  EF19  F003         	goto	l846
   282   0006AE                     l866:
   283   0006AE  0E02               	movlw	2
   284   0006B0  1807               	xorwf	main@count^0,w,c
   285   0006B2  1008               	iorwf	(main@count+1)^0,w,c
   286   0006B4  A4D8               	btfss	status,2,c
   287   0006B6  EF5F  F003         	goto	u181
   288   0006BA  EF61  F003         	goto	u180
   289   0006BE                     u181:
   290   0006BE  EF69  F003         	goto	l28
   291   0006C2                     u180:
   292   0006C2                     
   293                           ;lcdmotor.c: 49:       {;lcdmotor.c: 50:           PORTB=0X03;
   294   0006C2  0E03               	movlw	3
   295   0006C4  6E81               	movwf	129,c	;volatile
   296   0006C6                     
   297                           ;lcdmotor.c: 51:           display("STOP");
   298   0006C6  0E0F               	movlw	low STR_3
   299   0006C8  6E06               	movwf	display@p^0,c
   300   0006CA  ECCD  F003         	call	_display	;wreg free
   301   0006CE  EF19  F003         	goto	l846
   302   0006D2                     l28:
   303   0006D2  EF19  F003         	goto	l846
   304   0006D6  EF00  F000         	goto	start
   305   0006DA                     __end_of_main:
   306                           	callstack 0
   307                           
   308 ;; *************** function _display *****************
   309 ;; Defined at:
   310 ;;		line 80 in file "lcdmotor.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;  p               1    5[COMRAM] PTR const unsigned char 
   313 ;;		 -> STR_3(5), STR_2(14), STR_1(10), 
   314 ;; Auto vars:     Size  Location     Type
   315 ;;		None
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : 0/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   325 ;;      Params:         1       0       0       0       0       0       0
   326 ;;      Locals:         0       0       0       0       0       0       0
   327 ;;      Temps:          0       0       0       0       0       0       0
   328 ;;      Totals:         1       0       0       0       0       0       0
   329 ;;Total ram usage:        1 bytes
   330 ;; Hardware stack levels used: 1
   331 ;; Hardware stack levels required when called: 1
   332 ;; This function calls:
   333 ;;		_data
   334 ;; This function is called by:
   335 ;;		_main
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339                           	psect	text1
   340   00079A                     __ptext1:
   341                           	callstack 0
   342   00079A                     _display:
   343                           	callstack 29
   344   00079A                     
   345                           ;lcdmotor.c: 80: void display(const char *p);lcdmotor.c: 81: {;lcdmotor.c: 82:     while
      +                          (*p)
   346   00079A  EFD6  F003         	goto	l836
   347   00079E                     l832:
   348                           
   349                           ;lcdmotor.c: 83:     {;lcdmotor.c: 84:         data(*p);
   350   00079E  C006  FFF6         	movff	display@p,tblptrl
   351   0007A2                     	if	0	;There is only one active tblptr byte
   352   0007A2                     	endif
   353   0007A2                     	if	0	;tblptru may be non-zero
   354   0007A2                     	endif
   355   0007A2                     	if	0	;tblptru may be non-zero
   356   0007A2                     	endif
   357   0007A2  0008               	tblrd		*
   358   0007A4  50F5               	movf	tablat,w,c
   359   0007A6  EC6D  F003         	call	_data
   360   0007AA                     
   361                           ;lcdmotor.c: 85:         p++;
   362   0007AA  2A06               	incf	display@p^0,f,c
   363   0007AC                     l836:
   364                           
   365                           ;lcdmotor.c: 82:     while(*p)
   366   0007AC  C006  FFF6         	movff	display@p,tblptrl
   367   0007B0                     	if	0	;There is only one active tblptr byte
   368   0007B0                     	endif
   369   0007B0                     	if	0	;tblptru may be non-zero
   370   0007B0                     	endif
   371   0007B0                     	if	0	;tblptru may be non-zero
   372   0007B0                     	endif
   373   0007B0  0008               	tblrd		*
   374   0007B2  50F5               	movf	tablat,w,c
   375   0007B4  0900               	iorlw	0
   376   0007B6  A4D8               	btfss	status,2,c
   377   0007B8  EFE0  F003         	goto	u121
   378   0007BC  EFE2  F003         	goto	u120
   379   0007C0                     u121:
   380   0007C0  EFCF  F003         	goto	l832
   381   0007C4                     u120:
   382   0007C4  0012               	return		;funcret
   383   0007C6                     __end_of_display:
   384                           	callstack 0
   385                           
   386 ;; *************** function _data *****************
   387 ;; Defined at:
   388 ;;		line 69 in file "lcdmotor.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;  b               1    wreg     unsigned char 
   391 ;; Auto vars:     Size  Location     Type
   392 ;;  b               1    0[COMRAM] unsigned char 
   393 ;;  i               2    3[COMRAM] int 
   394 ;;  i               2    1[COMRAM] int 
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg, status,2, status,0
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   404 ;;      Params:         0       0       0       0       0       0       0
   405 ;;      Locals:         5       0       0       0       0       0       0
   406 ;;      Temps:          0       0       0       0       0       0       0
   407 ;;      Totals:         5       0       0       0       0       0       0
   408 ;;Total ram usage:        5 bytes
   409 ;; Hardware stack levels used: 1
   410 ;; This function calls:
   411 ;;		Nothing
   412 ;; This function is called by:
   413 ;;		_display
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           	psect	text2
   418   0006DA                     __ptext2:
   419                           	callstack 0
   420   0006DA                     _data:
   421                           	callstack 29
   422                           
   423                           ;incstack = 0
   424                           ;data@b stored from wreg
   425   0006DA  6E01               	movwf	data@b^0,c
   426   0006DC                     
   427                           ;lcdmotor.c: 69: void data(unsigned char b );lcdmotor.c: 70: {;lcdmotor.c: 71:     RC0=1
      +                          ;
   428   0006DC  8082               	bsf	3970,0,c	;volatile
   429                           
   430                           ;lcdmotor.c: 72:     RC1=0;
   431   0006DE  9282               	bcf	3970,1,c	;volatile
   432   0006E0                     
   433                           ;lcdmotor.c: 73:     PORTD=b;
   434   0006E0  C001  FF83         	movff	data@b,3971	;volatile
   435   0006E4                     
   436                           ;lcdmotor.c: 74:     RC2=1;
   437   0006E4  8482               	bsf	3970,2,c	;volatile
   438   0006E6                     
   439                           ;lcdmotor.c: 75:     for(int i=0;i<=100;i++);
   440   0006E6  0E00               	movlw	0
   441   0006E8  6E03               	movwf	(data@i+1)^0,c
   442   0006EA  0E00               	movlw	0
   443   0006EC  6E02               	movwf	data@i^0,c
   444   0006EE                     l748:
   445   0006EE  4A02               	infsnz	data@i^0,f,c
   446   0006F0  2A03               	incf	(data@i+1)^0,f,c
   447   0006F2  BE03               	btfsc	(data@i+1)^0,7,c
   448   0006F4  EF85  F003         	goto	u11
   449   0006F8  5003               	movf	(data@i+1)^0,w,c
   450   0006FA  E109               	bnz	u10
   451   0006FC  0E65               	movlw	101
   452   0006FE  5C02               	subwf	data@i^0,w,c
   453   000700  A0D8               	btfss	status,0,c
   454   000702  EF85  F003         	goto	u11
   455   000706  EF87  F003         	goto	u10
   456   00070A                     u11:
   457   00070A  EF77  F003         	goto	l748
   458   00070E                     u10:
   459   00070E                     
   460                           ;lcdmotor.c: 76:     RC2=0;
   461   00070E  9482               	bcf	3970,2,c	;volatile
   462   000710                     
   463                           ;lcdmotor.c: 77:     for(int i=0;i<=5000;i++);
   464   000710  0E00               	movlw	0
   465   000712  6E05               	movwf	(data@i_59+1)^0,c
   466   000714  0E00               	movlw	0
   467   000716  6E04               	movwf	data@i_59^0,c
   468   000718                     l758:
   469   000718  4A04               	infsnz	data@i_59^0,f,c
   470   00071A  2A05               	incf	(data@i_59+1)^0,f,c
   471   00071C  BE05               	btfsc	(data@i_59+1)^0,7,c
   472   00071E  EF9A  F003         	goto	u21
   473   000722  0E89               	movlw	137
   474   000724  5C04               	subwf	data@i_59^0,w,c
   475   000726  0E13               	movlw	19
   476   000728  5805               	subwfb	(data@i_59+1)^0,w,c
   477   00072A  A0D8               	btfss	status,0,c
   478   00072C  EF9A  F003         	goto	u21
   479   000730  EF9C  F003         	goto	u20
   480   000734                     u21:
   481   000734  EF8C  F003         	goto	l758
   482   000738                     u20:
   483   000738  0012               	return		;funcret
   484   00073A                     __end_of_data:
   485                           	callstack 0
   486                           
   487 ;; *************** function _cmd *****************
   488 ;; Defined at:
   489 ;;		line 59 in file "lcdmotor.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;  a               1    wreg     unsigned char 
   492 ;; Auto vars:     Size  Location     Type
   493 ;;  a               1    0[COMRAM] unsigned char 
   494 ;;  i               2    3[COMRAM] int 
   495 ;;  i               2    1[COMRAM] int 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, status,2, status,0
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   505 ;;      Params:         0       0       0       0       0       0       0
   506 ;;      Locals:         5       0       0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0
   508 ;;      Totals:         5       0       0       0       0       0       0
   509 ;;Total ram usage:        5 bytes
   510 ;; Hardware stack levels used: 1
   511 ;; This function calls:
   512 ;;		Nothing
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text3
   519   00073A                     __ptext3:
   520                           	callstack 0
   521   00073A                     _cmd:
   522                           	callstack 30
   523                           
   524                           ;incstack = 0
   525                           ;cmd@a stored from wreg
   526   00073A  6E01               	movwf	cmd@a^0,c
   527   00073C                     
   528                           ;lcdmotor.c: 59: void cmd(unsigned char a );lcdmotor.c: 60: {;lcdmotor.c: 61:     RC0=0;
   529   00073C  9082               	bcf	3970,0,c	;volatile
   530                           
   531                           ;lcdmotor.c: 62:     RC1=0;
   532   00073E  9282               	bcf	3970,1,c	;volatile
   533   000740                     
   534                           ;lcdmotor.c: 63:     PORTD=a;
   535   000740  C001  FF83         	movff	cmd@a,3971	;volatile
   536   000744                     
   537                           ;lcdmotor.c: 64:     RC2=1;
   538   000744  8482               	bsf	3970,2,c	;volatile
   539   000746                     
   540                           ;lcdmotor.c: 65:     for(int i=0;i<=100;i++);
   541   000746  0E00               	movlw	0
   542   000748  6E03               	movwf	(cmd@i+1)^0,c
   543   00074A  0E00               	movlw	0
   544   00074C  6E02               	movwf	cmd@i^0,c
   545   00074E                     l774:
   546   00074E  4A02               	infsnz	cmd@i^0,f,c
   547   000750  2A03               	incf	(cmd@i+1)^0,f,c
   548   000752  BE03               	btfsc	(cmd@i+1)^0,7,c
   549   000754  EFB5  F003         	goto	u31
   550   000758  5003               	movf	(cmd@i+1)^0,w,c
   551   00075A  E109               	bnz	u30
   552   00075C  0E65               	movlw	101
   553   00075E  5C02               	subwf	cmd@i^0,w,c
   554   000760  A0D8               	btfss	status,0,c
   555   000762  EFB5  F003         	goto	u31
   556   000766  EFB7  F003         	goto	u30
   557   00076A                     u31:
   558   00076A  EFA7  F003         	goto	l774
   559   00076E                     u30:
   560   00076E                     
   561                           ;lcdmotor.c: 66:     RC2=0;
   562   00076E  9482               	bcf	3970,2,c	;volatile
   563   000770                     
   564                           ;lcdmotor.c: 67:     for(int i=0;i<=5000;i++);
   565   000770  0E00               	movlw	0
   566   000772  6E05               	movwf	(cmd@i_55+1)^0,c
   567   000774  0E00               	movlw	0
   568   000776  6E04               	movwf	cmd@i_55^0,c
   569   000778                     l784:
   570   000778  4A04               	infsnz	cmd@i_55^0,f,c
   571   00077A  2A05               	incf	(cmd@i_55+1)^0,f,c
   572   00077C  BE05               	btfsc	(cmd@i_55+1)^0,7,c
   573   00077E  EFCA  F003         	goto	u41
   574   000782  0E89               	movlw	137
   575   000784  5C04               	subwf	cmd@i_55^0,w,c
   576   000786  0E13               	movlw	19
   577   000788  5805               	subwfb	(cmd@i_55+1)^0,w,c
   578   00078A  A0D8               	btfss	status,0,c
   579   00078C  EFCA  F003         	goto	u41
   580   000790  EFCC  F003         	goto	u40
   581   000794                     u41:
   582   000794  EFBC  F003         	goto	l784
   583   000798                     u40:
   584   000798  0012               	return		;funcret
   585   00079A                     __end_of_cmd:
   586                           	callstack 0
   587                           
   588                           	psect	rparam
   589   000000                     tosu	equ	0xFFF
   590                           tosh	equ	0xFFE
   591                           tosl	equ	0xFFD
   592                           stkptr	equ	0xFFC
   593                           pclatu	equ	0xFFB
   594                           pclath	equ	0xFFA
   595                           pcl	equ	0xFF9
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           prodh	equ	0xFF4
   601                           prodl	equ	0xFF3
   602                           indf0	equ	0xFEF
   603                           postinc0	equ	0xFEE
   604                           postdec0	equ	0xFED
   605                           preinc0	equ	0xFEC
   606                           plusw0	equ	0xFEB
   607                           fsr0h	equ	0xFEA
   608                           fsr0l	equ	0xFE9
   609                           wreg	equ	0xFE8
   610                           indf1	equ	0xFE7
   611                           postinc1	equ	0xFE6
   612                           postdec1	equ	0xFE5
   613                           preinc1	equ	0xFE4
   614                           plusw1	equ	0xFE3
   615                           fsr1h	equ	0xFE2
   616                           fsr1l	equ	0xFE1
   617                           bsr	equ	0xFE0
   618                           indf2	equ	0xFDF
   619                           postinc2	equ	0xFDE
   620                           postdec2	equ	0xFDD
   621                           preinc2	equ	0xFDC
   622                           plusw2	equ	0xFDB
   623                           fsr2h	equ	0xFDA
   624                           fsr2l	equ	0xFD9
   625                           status	equ	0xFD8

Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8       8
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    display@p	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[10]), STR_2(CODE[14]), STR_3(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_display
    _display->_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     514
                                              6 COMRAM     2     2      0
                                _cmd
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              1     0      1     348
                                              5 COMRAM     1     0      1
                               _data
 ---------------------------------------------------------------------------------
 (2) _data                                                 5     5      0      75
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _cmd                                                  5     5      0      75
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cmd
   _display
     _data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      8       8       1        8.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRh          6A      0       0      16        0.0%
BITBIGSFRlh          F      0       0      17        0.0%
BITBIGSFRll        281      0       0      18        0.0%
ABS                  0      0       0      19        0.0%
BIGRAM             5FF      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Aug 05 09:31:02 2024

                     l30 065C                       l51 070E                       l44 076E  
                     l60 07C4                       l28 06D2                       l54 0738  
                     l47 0798                       u10 070E                       u11 070A  
                     u20 0738                       u21 0734                       u30 076E  
                     u31 076A                       u40 0798                       u41 0794  
                    l740 06E4                      l750 06F2                      l742 06E6  
                    l830 079A                      l760 071C                      l752 0710  
                    l736 06DC                      l832 079E                      l840 0622  
                    l762 073C                      l738 06E0                      l834 07AA  
                    l850 0654                      l842 0628                      l764 0740  
                    l748 06EE                      l836 07AC                      l860 068C  
                    l852 0658                      l844 062E                      l774 074E  
                    l766 0744                      l758 0718                      l870 06C6  
                    l862 069E                      l854 066A                      l846 0632  
                    l838 0616                      l784 0778                      l776 0752  
                    l768 0746                      l864 06A2                      l856 067C  
                    l848 0640                      l786 077C                      l778 0770  
                    l866 06AE                      l858 0680                      l868 06C2  
                    _RC0 7C10                      _RC1 7C11                      _RC2 7C12  
                    _RC4 7C14                      u120 07C4                      u121 07C0  
                    u130 0640                      u131 063C                      u140 0654  
                    u141 0650                      u150 066A                      u151 0666  
                    u160 067C                      u161 0678                      u170 069E  
                    u171 069A                      u180 06C2                      u181 06BE  
                    _cmd 073A                     ?_cmd 0001                     STR_1 0605  
                   STR_2 0601                     STR_3 060F                     _data 06DA  
                   cmd@a 0001                     cmd@i 0002                     _main 0616  
                   start 0000             ___param_bank 0000                    ??_cmd 0001  
                  ?_data 0001                    ?_main 0001                    _PORTB 0F81  
                  _PORTD 0F83                    _TRISB 0F93                    _TRISC 0F94  
                  _TRISD 0F95          __end_of_display 07C6                    data@b 0001  
                  data@i 0002                    tablat 0FF5                    status 0FD8  
        __initialization 07C6             __end_of_data 073A             __end_of_main 06DA  
                 ??_data 0001                   ??_main 0007            __activetblptr 0001  
                 isa$std 0001                ??_display 0007             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 07C6            ___rparam_used 0001  
         __pcstackCOMRAM 0001                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0600                  __pcinit 07C6                  __ramtop 0600  
                __ptext0 0616                  __ptext1 079A                  __ptext2 06DA  
                __ptext3 073A                  cmd@i_55 0004                  _display 079A  
   end_of_initialization 07C6      start_initialization 07C6              __end_of_cmd 079A  
               ?_display 0006              __smallconst 0600                main@count 0007  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0600  
               data@i_59 0004                 isa$xinst 0000                 display@p 0006  
